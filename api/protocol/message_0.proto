/* Copyright 2015 Outscale SAS
 *
 * This file is part of Butterfly.
 *
 * Butterfly is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as published
 * by the Free Software Foundation.
 *
 * Butterfly is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Butterfly.  If not, see <http://www.gnu.org/licenses/>.
 */

// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
// document are to be interpreted as described in RFC 2119

syntax = "proto2";

message MessageV0 {

  optional Request request = 1;
  optional Response response = 2;
  // If set of request, the same message message_id will be set for response
  // This is particulary usefull to keep track when having several requests
  optional string message_id = 3;

  // Only one field must be filled in Request
  message Request {
    // Create a NIC
    // If a NIC already exists, old NIC will be removed
    // Response MUST have nic_add filled
    optional Nic nic_add = 1;

    // Update some informations of a NIC
    // Will replaced provided values in corresponding NIC
    optional NicUpdateReq nic_update = 2;

    // Remove a NIC by providing it's id
    optional string nic_del = 3;

    // List all NICs (just NICs id)
    // Can be true or false, it just have to be set
    // Reponse MUST have nic_list filled
    optional bool nic_list = 4;

    // List details of a specific NIC or all NIcs
    // Ask details of a specific NIC by passing it's id
    // Ask details of all NICs by passing an empty string
    // Reponse MUST have nic_details filled
    optional string nic_details = 5;

    // Export firewall data, used for VM migration by giving it's id
    // Reponse MUST have nic_export filled
    // Warning: not implemented
    optional string nic_export = 6;

    // Provide statistics about a particular NIC by giving it's id
    // Reponse MUST have nic_stats filled
    // Warning: not implemented
    optional string nic_stats = 7;

    // Create or Replace a Security Group
    // If Security Group does not exist, will create it
    // If Security Group already exist, will replace it (rules and members)
    optional Sg sg_add = 8;

    // Delete a Security Group by giving it's id
    optional string sg_del = 9;

    // List all Security Groups (just SGs id)
    // Can be true or false, it just have to be set
    // Response MUST have sg_list filled
    optional bool sg_list = 10;

    // Add rule to a Security Group
    // Will create the corresponding Security Group if does not exists
    optional SgRuleAddReq sg_rule_add = 11;

    // Delete a rule from a Security Group
    optional SgRuleDelReq sg_rule_del = 12;

    // List all rules of a Security Group by giving it's id
    // Reponse MUST have sg_rule_list filled
    optional string sg_rule_list = 13;

    // Add a member (IP) to a Security Group
    // Will create the corresponding Security Group if does not exists
    optional SgMemberAddReq sg_member_add = 14;

    // Delete a member (IP) from a Security Group
    optional SgMemberDelReq sg_member_del = 15;

    // List of all members of a specific Security Group by giving it's id
    // Reponse MUST have sg_member_list filled
    optional string sg_member_list = 16;

    // Ask application status informations
    // Can be true or false, it just have to be set
    // Response MUST have app_status filled
    optional bool app_status = 17;

    // Clean and quit Butterfly server
    // Can be true or false, it just have to be set
    optional bool app_quit = 18;

    // Ask to configure some parameters in application
    optional AppConfigReq app_config = 19;
  }

  message Response {
    // Generic return status of a command
    required Status status = 1;
    // Reponse to a NIC creation
    optional NicAddRes nic_add = 2;
    // List of all NICs id
    repeated string nic_list = 3;
    // Details of one NIC or all NICs
    repeated Nic nic_details = 4;
    // Provide firewall data session of a NIC
    optional NicExportRes nic_export = 5;
    // Provide stats of a NIC
    optional NicStats nic_stats = 6;
    // List of all Security Groups identifiers
    repeated string sg_list = 7;
    // List of all rules of a specific Security Group
    repeated Rule sg_rule_list = 8;
    // List of all members IP of a specific Security Group
    repeated string sg_member_list = 9;
    // Status informations
    optional AppStatusRes app_status = 10;
  }

  message Nic {
    // Network Interface Card identifier
    required string id = 1;
    // MAC-48 address separated by colons (:) in transmission order
    // e.g. 52:54:00:00:d7:11
    required string mac = 2;
    // 24 bits Virtual Network Id in lsb format
    // Note: only the least significant bits will be taken
    // Other bits MUST be set to zero
    // vni = vni & (UINT32_MAX >> 8)
    required uint32 vni = 3;
    // NIC can have several IP (v4 or/and v6)
    // Note that NIC IP(s) are only used for the IP anti-spoof if activated
    // Warning: not implemented for more that 1 IP
    repeated string ip = 4;
    // List of Security Group identifier
    repeated string security_group = 5;
    // IP anti-spoof (off by default)
    // IP anti-spoof can only work if NIC has it's IP filled
    // Note that MAC anti-spoof always ON
    optional bool ip_anti_spoof = 6 [default = false];
    // Ask this NIC to sniff another
    // If this option is set, all data from and to the targeted NIC will be
    // mirrored to this NIC.
    // Note this NIC won't be able to emit any packet to the outside.
    // Setting this option disable any anti-spoof feature on this NIC.
    // The option corresponds to the targeted NIC id.
    optional string sniff_target_nic_id = 7;
  }

  // NIC statistics
  message NicStats {
    // Amount of data comming in the NIC expressed in bytes
    // Note that value MAY overflow
    required uint64 in = 1;
    // Amount of data comming out of the NIC expressed in bytes
    // Note that value MAY overflow
    required uint64 out = 2;
  }

  message Cidr {
    // Address of CIDR (v4 or v6)
    required string address = 1;
    // Mask size
    // Values MUST be between 0 and 32 for IPv4
    // Values MUST be between 0 and 128 for IPv6
    required uint32 mask_size = 2;
  }

  message FwData {
    // Firewall data containing sessions
    optional bytes data = 1;
  }

  message Sg {
    // Security Group identifier
    required string id = 1;
    // IP list of Security Group members
    repeated string member = 2;
    // List of firewalling rules to apply
    repeated Rule rule = 3;
  }

  message Rule {

    enum Direction {
      // For packets comming in the NIC
      INBOUND = 0;
      // For packets comming out from the NIC
      // Warning: not implemented
      OUTBOUND = 1;
    }

    required Direction direction = 1;
    // Protocol number. MUST be one of standard protocol number from
    // http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml
    // or MUST be -1 for all protocols
    // Value range: 0-255 or -1
    // Hint: TCP:6 UDP:17
    required int32 protocol = 2;
    // Note that port_start and port_end are REQUIRED if used with TCP or UDP
    // Port range start (for TCP or UDP only)
    // If set, value MUST be between 0 and 65535 (included)
    optional uint32 port_start = 3;
    // Port range end (for TCP or UDP only)
    // If set, value MUST be between 0 and 65535 (included)
    optional uint32 port_end = 4;
    // Note that only one parameter below is REQUIRED
    // You cannot specify CIDR and security_group
    // CIDR
    optional Cidr cidr = 5;
    // Design members of a security group
    optional string security_group = 6;
  }

  message Error {
    optional string description = 1;
    optional int32 err_no = 2;
    optional string file = 3;
    optional uint64 line = 4;
    optional uint32 curs_pos = 5;
    optional string function = 6;
  }

  message Status {
    // Set to true if there is no error, false otherwhise
    required bool status = 1;
    // MAY be filled when status is false
    optional Error error = 2;
  }

  message NicUpdateReq {
    // NIC id to update
    required string id = 1;
    // Update IP anti-spoof
    optional bool ip_anti_spoof = 2;
    // Replace all IP of NIC
    repeated string ip = 3;
    // Replace Security Groups of a NIC
    repeated string security_group = 4;
  }

  message NicAddRes {
    // Path to the created NIC socket
    // vhost-user://UNIX_SOCKET_PATH
    optional string path = 1;
  }

  message NicExportRes {
    optional FwData fw_data = 1;
  }

  message SgRuleAddReq {
    // Security group id
    required string sg_id = 1;
    // Rule description to add
    required Rule rule = 2;
  }

  message SgRuleDelReq {
    // Security group id
    required string sg_id = 1;
    // Rule description to delete
    required Rule rule = 2;
  }

  message SgMemberAddReq {
    // Security group id
    required string sg_id = 1;
    // Member's IP
    required string member = 2;
  }

  message SgMemberDelReq {
    // Security group id
    required string sg_id = 1;
    // Member's IP
    required string member = 2;
  }

  message AppStatusRes {
    // Start date of application
    optional uint64 start_date = 1;
    // Current date of application
    optional uint64 current_date = 2;
    // Request counter made to API
    optional uint64 request_counter = 3;
    // Representation of connected network bricks inside application
    // This graphic is represented in DOT language.
    optional string graph_dot = 4;
  }

  message AppConfigReq {
    // If set, permet to change log level of application
    // Valid values are 'none', 'error', 'warning', 'info' or 'debug'
    optional string log_level = 1;
  }
}

